<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.pegasus</groupId>
	<artifactId>indexation</artifactId>
	<version>0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<properties>

        	<product.name></product.name>
		<product.description></product.description>
		<log.file>/opt/boilerplate/logs/app.log</log.file>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>8</java.version>
		<docker.image.prefix>pegasusma</docker.image.prefix>
	</properties>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.2.4.RELEASE</version>
		<relativePath/>
	</parent>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.0</version>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
		</dependency>
		<dependency>
	        <groupId>org.junit.jupiter</groupId>
	        <artifactId>junit-jupiter-engine</artifactId>
	        <scope>test</scope>
	    </dependency>
	    <dependency>
	        <groupId>junit</groupId>
	        <artifactId>junit</artifactId>
	        <scope>test</scope>
	    </dependency>
	    <dependency>
	        <groupId>org.junit.platform</groupId>
	        <artifactId>junit-platform-runner</artifactId>
	        <scope>test</scope>
	    </dependency>
	    <dependency>
	        <groupId>org.junit.vintage</groupId>
	        <artifactId>junit-vintage-engine</artifactId>
	        <scope>test</scope>
	    </dependency>
	    <dependency>
		    <groupId>org.apache.maven.surefire</groupId>
		    <artifactId>surefire-junit-platform</artifactId>
		    <version>3.0.0-M4</version>
		</dependency>
		<dependency>
		    <groupId>org.jacoco</groupId>
		    <artifactId>jacoco-maven-plugin</artifactId>
		    <version>0.8.3</version>
		</dependency>
		<dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
			</plugin>

			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>3.6.0.1398</version>
			</plugin>

			<plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
				<version>1.7.6</version>
				<configuration>
					<installDirectory>target</installDirectory>
				</configuration>
				<executions>
					<execution>
						<id>install-node-and-npm</id>
						<goals>
							<goal>install-node-and-npm</goal>
						</goals>
						<configuration>
							<nodeVersion>v10.16.3</nodeVersion>
							<npmVersion>6.9.0</npmVersion>
						</configuration>
					</execution>
					<execution>
						<id>npm install</id>
						<goals>
							<goal>npm</goal>
						</goals>
						<configuration>
							<arguments>install</arguments>
						</configuration>
					</execution>
					<execution>
						<id>webpack-build</id>
						<goals>
							<goal>webpack</goal>
						</goals>
						<configuration>
							<arguments>--config webpack.config.js -p --env.version=${project.version}</arguments>
						</configuration>
					</execution>
					<execution>
						<id>run tests</id>
						<goals>
							<goal>npm</goal>
						</goals>
						<configuration>
							<arguments>test -- --coverage</arguments>
							<environmentVariables>
	                            <CI>true</CI>
	                        </environmentVariables>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- <plugin>  
		        <groupId>org.apache.maven.plugins</groupId>  
		        <artifactId>maven-surefire-plugin</artifactId>
		        <configuration>  
		          <skipTests>true</skipTests>  
		        </configuration>  
			</plugin> -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.3</version>
				<!-- <configuration>
					<includes>
						<include>com/**/*</include>
					</includes>
				</configuration> -->
				<executions>
					<execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>default-report</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                    <!-- <execution>
                        <id>default-check</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution> -->
					<!-- <execution>
						<id>pre-test</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution> -->
					<execution>
						<id>report</id>
						<phase>install</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Docker build without Dockerfile -->
			<plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.2</version>
                <configuration>
					<imageName>${docker.image.prefix}/${project.artifactId}:${project.version}</imageName>
					<baseImage>adoptopenjdk/openjdk8:ubi</baseImage>
					<maintainer>pegasusma hongyu.ma@hotmail.fr</maintainer>
					<workdir>/home/target</workdir>
					<entryPoint>["java", "-jar", "-Dspring.config.location=application.properties", "${project.build.finalName}.jar"]</entryPoint>
					<resources>
						<resource>
							<targetPath>/home/target</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
						<resource>
							<targetPath>/home/target</targetPath>
							<directory>${basedir}</directory>
							<include>application.properties</include>
						</resource>
					</resources>
					<serverId>docker-hub</serverId>
				</configuration>
			</plugin>
			<!-- Docker build with Dockerfile -->
			<!-- <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.2</version>
                <configuration>
                	<imageName>${docker.image.prefix}/${project.artifactId}:${project.version}</imageName>
                	<baseImage>adoptopenjdk/openjdk11:ubi</baseImage>
					<entryPoint>["java", "-jar", "${project.build.finalName}.jar"]</entryPoint>
					<resources>
						<resource>
							<targetPath>/home/target</targetPath>
							<directory>${project.build.directory}</directory>
							<include>${project.build.finalName}.jar</include>
						</resource>
					</resources>
					<buildArgs>
				      	<JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
				    </buildArgs>
					<serverId>docker-hub</serverId>
				</configuration>
			</plugin> -->
		</plugins>
	</build>
	<distributionManagement>
		<repository>
			<id>NexusRelease</id>
			<name>Nexus Release Repository</name>
			<url>http://161.35.220.171:8081/nexus/content/repositories/releases/</url>
		</repository>
		<snapshotRepository>
			<id>NexusSnapshot</id>
			<name>Nexus Snapshot Repository</name>
			<url>http://161.35.220.171:8081/nexus/content/repositories/snapshots/</url>
		</snapshotRepository>
	</distributionManagement>
</project>
